services:
  # jenkins-docker:
  #   image: docker:dind
  #   container_name: jenkins-docker
  #   privileged: true
  #   networks:
  #     - jenkins
  #   environment:
  #     DOCKER_TLS_CERTDIR: "/certs"
  #   volumes:
  #     - jenkins-docker-certs:/certs/client
  #     - jenkins-data:/var/jenkins_home
  #   ports:
  #     - "2376:2376" #usata da Jenkins per comunicare con il Docker Engine.

  # jenkins-blueocean:
  #   build:
  #     context: ./myjenkins-blueocean  # Percorso della cartella che contiene il Dockerfile
  #     # dockerfile: Dockerfile  # Opzionale se il file si chiama semplicemente "Dockerfile"
  #   container_name: jenkins-blueocean
  #   restart: on-failure
  #   depends_on:
  #     - jenkins-docker
  #   networks:
  #     - jenkins
  #   environment:
  #     DOCKER_HOST: "tcp://jenkins-docker:2376"
  #     DOCKER_CERT_PATH: "/certs/client"
  #     DOCKER_TLS_VERIFY: "1"
  #   ports:
  #     - "8080:8080"  # interfaccia web. Accedo a Jenkins tramite http://localhost:8080
  #     - "50000:50000" # usata per la comunicazione tra i nodi Jenkins.
  #   volumes:
  #     - jenkins-data:/var/jenkins_home

  jenkins-blueocean:
    image: jenkins/jenkins:lts-jdk17  # Usa l'immagine ufficiale invece del Dockerfile personalizzato
    container_name: jenkins-blueocean
    restart: on-failure
    # depends_on:
    #   - jenkins-docker
    networks:
      - devops-net
    environment:
      DOCKER_HOST: "tcp://jenkins-docker:2376"
      DOCKER_CERT_PATH: "/certs/client"
      DOCKER_TLS_VERIFY: "1"
    ports:
      - "8080:8080"  # interfaccia web. Accedo a Jenkins tramite http://localhost:8080
      - "50000:50000" # usata per la comunicazione tra i nodi Jenkins.
    volumes:
      - jenkins-data:/var/jenkins_home


  nexus:
    image: sonatype/nexus3
    container_name: nexus
    restart: always
    networks:
      - devops-net
    ports:
      - "8081:8081" # Porta web di Nexus: Espone la porta 8081 del container sulla porta 8081 della macchina host.
                    # usata per l'interfaccia web e l'accesso amministrativo di Nexus. Quindi, per accedere all'interfaccia 
                    #utente di Nexus, dovrai andare su http://localhost:8081

                    # Serve per l'accesso all'interfaccia utente di Nexus (il pannello di controllo, le configurazioni, ecc.).

      - "8082:8082" # Docker registry (connector): configurando Nexus per fungere da Docker registry (ossia, per gestire push/pull di immagini Docker), dovrai abilitare un Docker connector.
                    # Il traffico Docker (le operazioni push/pull) deve essere gestito su una porta diversa da quella dell'interfaccia web per evitare conflitti e per separare i flussi di comunicazione.
                    # dovrremo attivare e configurare un repository Docker all’interno di Nexus in modo che ascolti sulla porta 8082.
                    # di default Nexus non ha un DOcker connector. Dovro:
                    # 1. Accedere all’interfaccia web di Nexus
                    # 2. Creare e configurare un repository Docker (con il protocollo appropriato, ad esempio HTTP o HTTPS).
                    # 3. Specificare la porta interna (in questo caso, 8082) affinché il connector risponda correttamente.
    volumes:
      - nexus-data:/nexus-data

  gitlab:
    image: gitlab/gitlab-ce:latest
    container_name: gitlab
    restart: unless-stopped
    networks:
      - devops-net
    hostname: gitlab.local
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab.local'
        gitlab_rails['gitlab_shell_ssh_port'] = 2222
    ports:
      - "80:80" # HTTP Per accedere a GitLab usando l’URL http://localhost e la porta 80.
      # - "443:443" # HTTPS per utilizzare GitLab con HTTPS dovrei creare un certificato SSL e configurare GitLab per utilizzarlo.
      - "2222:22" # SSH: serve a mappare la porta 22 del container GitLab (usata per SSH) alla porta 2222 del tuo host. 
                  #      Questo ci permette di accedere al servizio SSH di GitLab tramite la porta 2222 del tuo host.
                  #      Con questa configurazione, possiamo accedere al servizio SSH di GitLab utilizzando la porta 2222 dell'host. 
                  #      Ad esempio, per clonare un repository Git tramite SSH, possiamo usare un comando come questo:
                  #      git clone ssh://git@localhost:2222/namespace/repository.git
    volumes:
      - gitlab-config:/etc/gitlab
      - gitlab-logs:/var/log/gitlab
      - gitlab-data:/var/opt/gitlab

networks:
  devops-net:

volumes:
  jenkins-docker-certs:
  jenkins-data:
  nexus-data:
  gitlab-config:
  gitlab-logs:
  gitlab-data:


# COSA FARE:
# 1. Fare make ed accedere a jenkins e nexus. Vedere se ci sono
# 2. Se ci sono riprendere l articolo su jekins e nexus
# 3. Aggiungere un comando al make che mi faccia stampare le due password
#    con exec







# VERSIONE DI FABIOLA:

# # definizione dei servizi (container) che compongono l'ambiente
# services:
#   jenkins:
#     image: jenkins/jenkins:lts-jdk17
#         # nome personalizzato rende più facile identificare il container
#     container_name: jenkins
#         # mapping delle porte dall'host al container, formato: "porta_host:porta_container"
#     ports:
#         # interfaccia web
#       - "8080:8080"
#         # per interfacciarsi con altri jenkins agents
#       - "50000:50000"
#         # mappa la directory jenkins_home del container con un volume docker per mantenere configurazioni e dati
#     volumes:
#       - jenkins_home:/var/jenkins_home
#     environment:
#         # disabilita la procedura guidata di installazione iniziale
#       - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
#         # connessione alla rete personalizzata
#     networks:
#       - devops_network
#         # politica di riavvio del container, unless-stopped: Riavvia sempre tranne che per arresti espliciti
#     restart: unless-stopped

#   # secondo 
#   nexus:
#     image: sonatype/nexus3
#     container_name: nexus
#     ports:
#       # interfaccia web
#       - "8081:8081"
#       # porta 8083: Potenzialmente per registry Docker privato
#       - "8083:8083"
#     volumes:
#       - nexus_data:/nexus-data
#       # configurazione dei parametri JVM
#     environment:
#       # imposta parametri di memoria per Java
#       - INSTALL4J_ADD_VM_PARAMS=-Xms2703m -Xmx2703m -XX:MaxDirectMemorySize=2703m
#     networks:
#       - devops_network
#     restart: unless-stopped

#   gitlab:
#     # immagine Community Edition di GitLab
#     image: gitlab/gitlab-ce:latest
#     container_name: gitlab
#     hostname: gitlab.local
#     ports:
#       # Porta 80: HTTP
#       - "80:80"
#       # Porta 443: HTTPS
#       - "443:443"
#       # Porta 22: SSH per Git
#       - "22:22"
#     volumes:
#       # Volume per configurazioni
#       - gitlab_config:/etc/gitlab
#       # Volume per log
#       - gitlab_logs:/var/log/gitlab
#       # Volume per dati
#       - gitlab_data:/var/opt/gitlab
#     environment:
#       # Configurazione Omnibus (sistema di configurazione di GitLab)
#       GITLAB_OMNIBUS_CONFIG: |
#         external_url 'http://gitlab.local'
#         registry_external_url 'http://gitlab.local:5050'
#         gitlab_rails['initial_root_password'] = 'xK9#mP2$vL5@nQ8'
#         gitlab_rails['initial_shared_runners_registration_token'] = "token-personalizzato"
#         gitlab_rails['initial_root_email'] = "root@gitlab.local"
#         gitlab_rails['gitlab_shell_ssh_port'] = 22
#         gitlab_rails['gitlab_email_enabled'] = false
        
#       # URL esterno per accedere a GitLab
#       # URL per il registro Docker interno
#       # Password iniziale per l'utente root 
#       # NOTA: DA CAMBIARE ASSOLUTAMENTE se va in produzione!

#     # Dimensione della memoria condivisa, utile per migliorare le prestazioni
#     shm_size: '256m'
#     networks:
#       - devops_network
#     restart: unless-stopped

# networks:
#   devops_network:
#     driver: bridge

# # Definizione dei volumi persistenti
# volumes:
#   jenkins_home:
#     driver: local
#   nexus_data:
#     driver: local
#   gitlab_config:
#     driver: local
#   gitlab_logs:
#     driver: local
#   gitlab_data:
#     driver: local