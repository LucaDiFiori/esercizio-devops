services:
  jenkins-docker:
    image: docker:dind
    container_name: jenkins-docker
    privileged: true
    networks:
      - jenkins
    environment:
      DOCKER_TLS_CERTDIR: "/certs"
    volumes:
      - jenkins-docker-certs:/certs/client
      - jenkins-data:/var/jenkins_home
    ports:
      - "2376:2376" #usata da Jenkins per comunicare con il Docker Engine.

  jenkins-blueocean:
    build:
      context: ./myjenkins-blueocean  # Percorso della cartella che contiene il Dockerfile
      # dockerfile: Dockerfile  # Opzionale se il file si chiama semplicemente "Dockerfile"
    container_name: jenkins-blueocean
    restart: on-failure
    depends_on:
      - jenkins-docker
    networks:
      - jenkins
    environment:
      DOCKER_HOST: "tcp://jenkins-docker:2376"
      DOCKER_CERT_PATH: "/certs/client"
      DOCKER_TLS_VERIFY: "1"
    ports:
      - "8080:8080"  # interfaccia web. Accedo a Jenkins tramite http://localhost:8080
      - "50000:50000" # usata per la comunicazione tra i nodi Jenkins.
    volumes:
      - jenkins-data:/var/jenkins_home


  nexus:
    image: sonatype/nexus3
    container_name: nexus
    restart: always
    networks:
      - devops
    ports:
      - "8081:8081" # Porta web di Nexus: Espone la porta 8081 del container sulla porta 8081 della macchina host.
                    # usata per l'interfaccia web e l'accesso amministrativo di Nexus. Quindi, per accedere all'interfaccia 
                    #utente di Nexus, dovrai andare su http://localhost:8081.

                    # Serve per l'accesso all'interfaccia utente di Nexus (il pannello di controllo, le configurazioni, ecc.).

      - "8082:8082" # Docker registry (connector): configurando Nexus per fungere da Docker registry (ossia, per gestire push/pull di immagini Docker), dovrai abilitare un Docker connector.
                    # Il traffico Docker (le operazioni push/pull) deve essere gestito su una porta diversa da quella dell'interfaccia web per evitare conflitti e per separare i flussi di comunicazione.
                    # dovrremo attivare e configurare un repository Docker all’interno di Nexus in modo che ascolti sulla porta 8082.
                    # di default Nexus non ha un DOcker connector. Dovro:
                    # 1. Accedere all’interfaccia web di Nexus
                    # 2. Creare e configurare un repository Docker (con il protocollo appropriato, ad esempio HTTP o HTTPS).
                    # 3. Specificare la porta interna (in questo caso, 8082) affinché il connector risponda correttamente.
    volumes:
      - nexus-data:/nexus-data

  gitlab:
    image: gitlab/gitlab-ce:latest
    container_name: gitlab
    restart: unless-stopped
    networks:
      - devops
    hostname: gitlab.local
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab.local'
        gitlab_rails['gitlab_shell_ssh_port'] = 2222
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS
      - "2222:22" # SSH
      # Per accedere a GitLab usando l’URL http://gitlab.local sul tuo computer, potrebbe essere necessario aggiungere una voce nel file hosts (ad es. 127.0.0.1 gitlab.local).
    volumes:
      - gitlab-config:/etc/gitlab
      - gitlab-logs:/var/log/gitlab
      - gitlab-data:/var/opt/gitlab

networks:
  jenkins:
  devops:

volumes:
  jenkins-docker-certs:
  jenkins-data:
  nexus-data:
  gitlab-config:
  gitlab-logs:
  gitlab-data:


# COSA FARE:
# 1. Fare make ed accedere a jenkins e nexus. Vedere se ci sono
# 2. Se ci sono riprendere l articolo su jekins e nexus
# 3. Aggiungere un comando al make che mi faccia stampare le due password
#    con exec